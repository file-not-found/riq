#!/usr/bin/env python3
from argparse import ArgumentParser
from getpass import getpass
import requests
import json
import os.path
from configparser import ConfigParser

RETRY_COUNT = 5
CONFIG =  os.path.dirname(os.path.realpath(__file__)) + '/config.ini'
login_data = {}

def init_config():
    global login_data
    config = ConfigParser()
    config.read(CONFIG)
    if not 'riskiq' in config:
        config['riskiq'] = {}
    if not 'username' in config['riskiq']:
        username = input('please enter username(e-mail) for riskiq: ')
        config['riskiq']['username'] = username
        password = getpass('please enter password for riskiq (input hidden): ')
        config['riskiq']['password'] = password
        with open(CONFIG, 'w') as configfile:
            config.write(configfile)
    username = config['riskiq']['username']
    password = config['riskiq']['password']
    login_data = {
        'username': username,
        'password': password,
        'twoFactorAnswer': None,
    }

def print_whois(text):
    data = json.loads(text)
    if 'registrar' in data:
        print(" - registrar: " + data['registrar'])

def print_heatmap(text):
    data = json.loads(text)
    if 'enrichment' in data:
        if 'asn' in data['enrichment'] and data['enrichment']['asn'] != None:
            print(" - asn: " + data['enrichment']['asn'])
        if 'country' in data['enrichment'] and data['enrichment']['country'] != None:
            print(" - country: " + data['enrichment']['country'])

def print_reputation(text):
    data = json.loads(text)
    if 'score' in data and 'classification' in data:
        print(" - reputation: {} (Score: {})".format(data['classification'], data['score']))

def print_insights(text):
    data = json.loads(text)
    insights = ''
    if 'results' in data:
        r = data['results']
        for rule in r:
            if 'score' in rule and 'rule' in rule and rule['score'] > 0:
                if 'name' in rule['rule']:
                    insights += rule['rule']['name'] + ' '
    if insights != '':
        print(" - insights: {}".format(insights))

def print_resolutions(text, count):
    data = json.loads(text)
    if 'resolutions' in data and 'results' in data:
        if count == None:
            count = '?'
        print("**resolutions ("+ str(count) + ")**")
        i = 0
        resolveType = None
        for r in data['results']:
            if i == 0:
                resolveType = r.get('resolveType')
                header1 = "| Resolve                        | FirstSeen   - LastSeen  |"
                header2 = "|--------------------------------|-------------------------|"
                if resolveType == 'ip':
                    header1 += " Country | ASN |"
                    header2 += "---------|-----|"
                print(header1)
                print(header2)
            i += 1
            if i <= MAX_RESULTS:
                if 'resolve' in r and 'firstSeen' in r and 'lastSeen' in r and r['resolve'] in data['resolutions']:
                    v = r['resolve']
                    firstSeen = r.get('firstSeen')[:10]
                    lastSeen = r.get('lastSeen')[:10]
                    line = "| {:30} | {} - {} |".format("[["+v+"]]", firstSeen, lastSeen)
                    if resolveType == 'ip':
                        country = data['resolutions'][v].get('country', '  ')
                        asn = data['resolutions'][v].get('asn', '')
                        line += "   {}    | `{}` |".format(country, asn)
                    print(line)
            else:
                print("*...(truncated)...*")
                break;

def riskiq_login(s):
    response = s.get("https://community.riskiq.com/login")
    response = s.post("https://community.riskiq.com/api/account/login",json=login_data)
    if response.status_code == 200 and response.text == '{"success": true}':
        return True
    return False

def riskiq_logout(s):
    response = s.post("https://community.riskiq.com/api/account/logout")

def api_request(s, url):
    response = s.get(url)
    count = 1
    while count <= RETRY_COUNT and response.status_code != 200:
        response = s.get(url)
        count += 1
    if response.status_code == 200:
        return response.text
    return None

def get_whois(s, query):
    return api_request(s, "https://community.riskiq.com/api/whois?query=" + query + "&compact_record=true")

def get_heatmap(s, query):
    return api_request(s, "https://community.riskiq.com/api/heatmap?query=" + query + "&start=&end=&page=1")

def get_reputation(s, query):
    return api_request(s, "https://community.riskiq.com/api/reputation?query=" + query)

def get_insights(s, query):
    return api_request(s, "https://community.riskiq.com/api/analyst-insights?entity=" + query)

def get_resolution_count(s, query):
    data = json.loads(api_request(s, "https://community.riskiq.com/api/resolutions/count?query=" + query))
    if 'totalCount' in data:
        return data['totalCount']
    return None

def get_resolutions(s, query):
    return api_request(s, "https://community.riskiq.com/api/resolutions?includeFacets=false&query=" + query + "&page=1&sort=lastSeen&pageSize=" + str(MAX_RESULTS) + "&order=desc")

if __name__ == '__main__':
    init_config()

    parser = ArgumentParser()
    parser.add_argument('--max', '-m', type=int, default=20, help='maximum number of resolutions to print')
    parser.add_argument('query')

    args = parser.parse_args()

    MAX_RESULTS = args.max

    s = requests.session()
    if riskiq_login(s):

        print("### {}".format(args.query))
        whois = get_whois(s, args.query)
        if whois:
            print_whois(whois)

        heatmap = get_heatmap(s, args.query)
        if heatmap:
            print_heatmap(heatmap)

        reputation = get_reputation(s, args.query)
        if reputation:
            print_reputation(reputation)

        insights = get_insights(s, args.query)
        if insights:
            print_insights(insights)

        count = get_resolution_count(s, args.query)

        resolutions = get_resolutions(s, args.query)
        print_resolutions(resolutions, count)

        riskiq_logout(s)

    else:
        print("Login failed. Check credentials in {}".format(CONFIG))
